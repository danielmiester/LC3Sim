/*
 * LC3Gui.java
 *
 * Created on February 20, 2008, 2:18 AM
 */
package gui;

import cpu.Processor;
import gui.Actions.StartStopAction;
import gui.Actions.StepAction;
import java.awt.Color;
import java.awt.Rectangle;
import java.awt.event.ActionListener;
import java.awt.event.InputMethodListener;
import java.awt.event.KeyListener;
import java.util.Observable;
import java.util.Observer;
import javax.swing.JTable;
import javax.swing.JViewport;
import javax.swing.Timer;
import javax.swing.event.ChangeListener;
import javax.swing.event.MenuListener;

/**
 *
 * @author  Administrator
 */
public class LC3Gui extends javax.swing.JFrame implements Observer, ActionListener, InputMethodListener, KeyListener, ChangeListener, MenuListener {

    /** Creates new form LC3Gui */
    public LC3Gui() {
        preInit();
        initComponents();

        postInit();
    }

    private void preInit() {
        String[] names = {"Addr", "Bin", "Hex", "ASM"};
        proc = new Processor();
        thread = new Thread(proc);
        codeModel = new CodeTableModel(names, proc);
        consoleFrame = new ConsoleFrame(proc);

    }

    private void postInit() {
        proc.addObserver(this);
        proc.addObserver(consoleFrame);
        
        consoleFrame.setLocation(getWidth(),0);
        
        HEX_WIDTH = codeTable.getGraphics().getFontMetrics().charWidth('D') * 5 + 5;
        BIN_WIDTH = codeTable.getGraphics().getFontMetrics().charWidth('0') * 16 + 4;
        OTHER_WIDTH = 280;//codeTable.getWidth() - HEX_WIDTH - BIN_WIDTH - HEX_WIDTH;
        codeTable.getColumnModel().getColumn(0).setPreferredWidth(HEX_WIDTH);
        codeTable.getColumnModel().getColumn(1).setPreferredWidth(BIN_WIDTH);
        codeTable.getColumnModel().getColumn(2).setPreferredWidth(HEX_WIDTH);
        codeTable.getColumnModel().getColumn(3).setPreferredWidth(OTHER_WIDTH);

        scrollToTop(codeTable, 0x3000, 0);
        setMinimumSize(getSize());
        setMaximumSize(getSize());
        setPreferredSize(getSize());
        setResizable(false);
        registerTable.setModel(new RegisterModel(proc));
        registerTable.getColumnModel().getColumn(2).setWidth(
                registerTable.getGraphics().getFontMetrics().charWidth('0') * 8);
        registerTable.setSelectionBackground(new Color(128, 128, 255,128));
        this.validate();
        timer = new Timer(0, null);


    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        statusBar = new javax.swing.JPanel();
        statusText = new javax.swing.JLabel();
        statusLabel = new javax.swing.JLabel();
        stepButton = new javax.swing.JButton();
        codeScroller = new javax.swing.JScrollPane();
        codeTable = new javax.swing.JTable();
        startStopToggle = new javax.swing.JToggleButton();
        RegisterTableHeaders = new javax.swing.JScrollPane();
        registerTable = new javax.swing.JTable();
        consoleCheck = new javax.swing.JCheckBox();
        speedPane = new javax.swing.JPanel();
        speedSlider = new javax.swing.JSlider();
        speedIndicator = new javax.swing.JLabel();
        mainMenu = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        menuNew = new javax.swing.JMenuItem();
        menuOpen = new javax.swing.JMenuItem();
        menuSave = new javax.swing.JMenuItem();
        menuSaveAs = new javax.swing.JMenuItem();
        menuSeparator = new javax.swing.JSeparator();
        menuExit = new javax.swing.JMenuItem();
        runMenu = new javax.swing.JMenu();
        menuRun = new javax.swing.JMenuItem();
        menuStep = new javax.swing.JMenuItem();
        menuStop = new javax.swing.JMenuItem();
        mainMenu1 = new javax.swing.JMenuBar();
        fileMenu1 = new javax.swing.JMenu();
        menuNew1 = new javax.swing.JMenuItem();
        menuOpen1 = new javax.swing.JMenuItem();
        menuSave1 = new javax.swing.JMenuItem();
        menuSaveAs1 = new javax.swing.JMenuItem();
        menuSeparator1 = new javax.swing.JSeparator();
        menuExit1 = new javax.swing.JMenuItem();
        runMenu1 = new javax.swing.JMenu();
        menuRun1 = new javax.swing.JMenuItem();
        menuStep1 = new javax.swing.JMenuItem();
        menuStop1 = new javax.swing.JMenuItem();
        mainMenu2 = new javax.swing.JMenuBar();
        fileMenu2 = new javax.swing.JMenu();
        menuNew2 = new javax.swing.JMenuItem();
        menuOpen2 = new javax.swing.JMenuItem();
        menuSave2 = new javax.swing.JMenuItem();
        menuSaveAs2 = new javax.swing.JMenuItem();
        menuSeparator2 = new javax.swing.JSeparator();
        menuExit2 = new javax.swing.JMenuItem();
        runMenu2 = new javax.swing.JMenu();
        menuRun2 = new javax.swing.JMenuItem();
        menuStep2 = new javax.swing.JMenuItem();
        menuStop2 = new javax.swing.JMenuItem();
        mainMenu3 = new javax.swing.JMenuBar();
        fileMenu3 = new javax.swing.JMenu();
        menuNew3 = new javax.swing.JMenuItem();
        menuOpen3 = new javax.swing.JMenuItem();
        menuSave3 = new javax.swing.JMenuItem();
        menuSaveAs3 = new javax.swing.JMenuItem();
        menuSeparator3 = new javax.swing.JSeparator();
        menuExit3 = new javax.swing.JMenuItem();
        runMenu3 = new javax.swing.JMenu();
        menuRun3 = new javax.swing.JMenuItem();
        menuStep3 = new javax.swing.JMenuItem();
        menuStop3 = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance().getContext().getResourceMap(LC3Gui.class);
        setTitle(resourceMap.getString("mainWindow.title")); // NOI18N
        setLocationByPlatform(true);
        setName("mainWindow"); // NOI18N

        statusBar.setBorder(javax.swing.BorderFactory.createTitledBorder(""));

        statusText.setText(resourceMap.getString("statusText.text")); // NOI18N

        statusLabel.setText(resourceMap.getString("statusLabel.text")); // NOI18N

        javax.swing.GroupLayout statusBarLayout = new javax.swing.GroupLayout(statusBar);
        statusBar.setLayout(statusBarLayout);
        statusBarLayout.setHorizontalGroup(
            statusBarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(statusBarLayout.createSequentialGroup()
                .addComponent(statusLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(statusText)
                .addContainerGap(528, Short.MAX_VALUE))
        );
        statusBarLayout.setVerticalGroup(
            statusBarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(statusBarLayout.createSequentialGroup()
                .addGroup(statusBarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(statusLabel)
                    .addComponent(statusText))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        stepButton.setAction(new StepAction(proc));
        stepButton.setText(resourceMap.getString("stepButton.text")); // NOI18N
        stepButton.addActionListener(this);

        codeTable.setFont(new java.awt.Font("Lucida Console", 0, 10));
        codeTable.setModel(codeModel);
        codeTable.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        codeTable.addInputMethodListener(this);
        codeTable.addKeyListener(this);
        codeScroller.setViewportView(codeTable);

        startStopToggle.setAction(new StartStopAction(proc));
        startStopToggle.setText(resourceMap.getString("startStopToggle.text")); // NOI18N
        startStopToggle.addActionListener(this);

        registerTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {"R0", "xAAAA", null},
                {"R1", "xBBBB", null},
                {"R2", "xCCCC", null},
                {"R3", "xDDDD", null},
                {"R4", "xEEEE", null},
                {"R5", null, null},
                {"R6", null, null},
                {"R7", null, null},
                {"PC", null, null},
                {"CC", null, null},
                {"PSR", null, null},
                {"IR", null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, true, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        RegisterTableHeaders.setViewportView(registerTable);

        consoleCheck.setText(resourceMap.getString("consoleCheck.text")); // NOI18N
        consoleCheck.addActionListener(this);
        consoleCheck.addChangeListener(this);

        speedPane.setBorder(javax.swing.BorderFactory.createTitledBorder(resourceMap.getString("speedPane.border.title"))); // NOI18N

        speedSlider.setMaximum(101);
        speedSlider.setValue(0);
        speedSlider.addChangeListener(this);

        speedIndicator.setText(resourceMap.getString("speedIndicator.text")); // NOI18N

        javax.swing.GroupLayout speedPaneLayout = new javax.swing.GroupLayout(speedPane);
        speedPane.setLayout(speedPaneLayout);
        speedPaneLayout.setHorizontalGroup(
            speedPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(speedPaneLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(speedPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, speedPaneLayout.createSequentialGroup()
                        .addComponent(speedIndicator)
                        .addGap(60, 60, 60))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, speedPaneLayout.createSequentialGroup()
                        .addComponent(speedSlider, javax.swing.GroupLayout.DEFAULT_SIZE, 136, Short.MAX_VALUE)
                        .addContainerGap())))
        );
        speedPaneLayout.setVerticalGroup(
            speedPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, speedPaneLayout.createSequentialGroup()
                .addComponent(speedSlider, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(11, 11, 11)
                .addComponent(speedIndicator))
        );

        fileMenu.setText(resourceMap.getString("fileMenu.text")); // NOI18N
        fileMenu.addMenuListener(this);

        menuNew.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.event.InputEvent.CTRL_MASK));
        menuNew.setText(resourceMap.getString("menuNew.text")); // NOI18N
        fileMenu.add(menuNew);

        menuOpen.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_MASK));
        menuOpen.setText(resourceMap.getString("menuOpen.text")); // NOI18N
        fileMenu.add(menuOpen);

        menuSave.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
        menuSave.setText(resourceMap.getString("menuSave.text")); // NOI18N
        fileMenu.add(menuSave);

        menuSaveAs.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F12, 0));
        menuSaveAs.setText(resourceMap.getString("menuSaveAs.text")); // NOI18N
        fileMenu.add(menuSaveAs);
        fileMenu.add(menuSeparator);

        menuExit.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F4, java.awt.event.InputEvent.ALT_MASK));
        menuExit.setText(resourceMap.getString("menuExit.text")); // NOI18N
        menuExit.addActionListener(this);
        fileMenu.add(menuExit);

        mainMenu.add(fileMenu);

        runMenu.setText(resourceMap.getString("runMenu.text")); // NOI18N

        menuRun.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F5, 0));
        menuRun.setText(resourceMap.getString("menuRun.text")); // NOI18N
        runMenu.add(menuRun);

        menuStep.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F6, 0));
        menuStep.setText(resourceMap.getString("menuStep.text")); // NOI18N
        runMenu.add(menuStep);

        menuStop.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F7, 0));
        menuStop.setText(resourceMap.getString("menuStop.text")); // NOI18N
        menuStop.addActionListener(this);
        runMenu.add(menuStop);

        mainMenu.add(runMenu);

        fileMenu1.setText(resourceMap.getString("fileMenu1.text")); // NOI18N
        fileMenu1.addMenuListener(this);

        menuNew1.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.event.InputEvent.CTRL_MASK));
        menuNew1.setText(resourceMap.getString("menuNew1.text")); // NOI18N
        fileMenu1.add(menuNew1);

        menuOpen1.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_MASK));
        menuOpen1.setText(resourceMap.getString("menuOpen1.text")); // NOI18N
        fileMenu1.add(menuOpen1);

        menuSave1.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
        menuSave1.setText(resourceMap.getString("menuSave1.text")); // NOI18N
        fileMenu1.add(menuSave1);

        menuSaveAs1.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F12, 0));
        menuSaveAs1.setText(resourceMap.getString("menuSaveAs1.text")); // NOI18N
        fileMenu1.add(menuSaveAs1);
        fileMenu1.add(menuSeparator1);

        menuExit1.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F4, java.awt.event.InputEvent.ALT_MASK));
        menuExit1.setText(resourceMap.getString("menuExit1.text")); // NOI18N
        menuExit1.addActionListener(this);
        fileMenu1.add(menuExit1);

        mainMenu1.add(fileMenu1);

        runMenu1.setText(resourceMap.getString("runMenu1.text")); // NOI18N

        menuRun1.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F5, 0));
        menuRun1.setText(resourceMap.getString("menuRun1.text")); // NOI18N
        runMenu1.add(menuRun1);

        menuStep1.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F6, 0));
        menuStep1.setText(resourceMap.getString("menuStep1.text")); // NOI18N
        runMenu1.add(menuStep1);

        menuStop1.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F7, 0));
        menuStop1.setText(resourceMap.getString("menuStop1.text")); // NOI18N
        menuStop1.addActionListener(this);
        runMenu1.add(menuStop1);

        mainMenu1.add(runMenu1);

        fileMenu2.setText(resourceMap.getString("fileMenu2.text")); // NOI18N
        fileMenu2.addMenuListener(this);

        menuNew2.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.event.InputEvent.CTRL_MASK));
        menuNew2.setText(resourceMap.getString("menuNew2.text")); // NOI18N
        fileMenu2.add(menuNew2);

        menuOpen2.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_MASK));
        menuOpen2.setText(resourceMap.getString("menuOpen2.text")); // NOI18N
        fileMenu2.add(menuOpen2);

        menuSave2.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
        menuSave2.setText(resourceMap.getString("menuSave2.text")); // NOI18N
        fileMenu2.add(menuSave2);

        menuSaveAs2.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F12, 0));
        menuSaveAs2.setText(resourceMap.getString("menuSaveAs2.text")); // NOI18N
        fileMenu2.add(menuSaveAs2);
        fileMenu2.add(menuSeparator2);

        menuExit2.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F4, java.awt.event.InputEvent.ALT_MASK));
        menuExit2.setText(resourceMap.getString("menuExit2.text")); // NOI18N
        menuExit2.addActionListener(this);
        fileMenu2.add(menuExit2);

        mainMenu2.add(fileMenu2);

        runMenu2.setText(resourceMap.getString("runMenu2.text")); // NOI18N

        menuRun2.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F5, 0));
        menuRun2.setText(resourceMap.getString("menuRun2.text")); // NOI18N
        runMenu2.add(menuRun2);

        menuStep2.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F6, 0));
        menuStep2.setText(resourceMap.getString("menuStep2.text")); // NOI18N
        runMenu2.add(menuStep2);

        menuStop2.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F7, 0));
        menuStop2.setText(resourceMap.getString("menuStop2.text")); // NOI18N
        menuStop2.addActionListener(this);
        runMenu2.add(menuStop2);

        mainMenu2.add(runMenu2);

        fileMenu3.setText(resourceMap.getString("fileMenu3.text")); // NOI18N
        fileMenu3.addMenuListener(this);

        menuNew3.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.event.InputEvent.CTRL_MASK));
        menuNew3.setText(resourceMap.getString("menuNew3.text")); // NOI18N
        fileMenu3.add(menuNew3);

        menuOpen3.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_MASK));
        menuOpen3.setText(resourceMap.getString("menuOpen3.text")); // NOI18N
        fileMenu3.add(menuOpen3);

        menuSave3.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
        menuSave3.setText(resourceMap.getString("menuSave3.text")); // NOI18N
        fileMenu3.add(menuSave3);

        menuSaveAs3.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F12, 0));
        menuSaveAs3.setText(resourceMap.getString("menuSaveAs3.text")); // NOI18N
        fileMenu3.add(menuSaveAs3);
        fileMenu3.add(menuSeparator3);

        menuExit3.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F4, java.awt.event.InputEvent.ALT_MASK));
        menuExit3.setText(resourceMap.getString("menuExit3.text")); // NOI18N
        menuExit3.addActionListener(this);
        fileMenu3.add(menuExit3);

        mainMenu3.add(fileMenu3);

        runMenu3.setText(resourceMap.getString("runMenu3.text")); // NOI18N

        menuRun3.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F5, 0));
        menuRun3.setText(resourceMap.getString("menuRun3.text")); // NOI18N
        runMenu3.add(menuRun3);

        menuStep3.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F6, 0));
        menuStep3.setText(resourceMap.getString("menuStep3.text")); // NOI18N
        runMenu3.add(menuStep3);

        menuStop3.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F7, 0));
        menuStop3.setText(resourceMap.getString("menuStop3.text")); // NOI18N
        menuStop3.addActionListener(this);
        runMenu3.add(menuStop3);

        mainMenu3.add(runMenu3);

        setJMenuBar(mainMenu3);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(statusBar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(speedPane, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED))
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(consoleCheck)
                                .addComponent(RegisterTableHeaders, javax.swing.GroupLayout.DEFAULT_SIZE, 168, Short.MAX_VALUE)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(stepButton)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(startStopToggle)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED))))
                        .addGap(6, 6, 6)
                        .addComponent(codeScroller, javax.swing.GroupLayout.PREFERRED_SIZE, 450, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(RegisterTableHeaders, javax.swing.GroupLayout.PREFERRED_SIZE, 215, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(stepButton)
                            .addComponent(startStopToggle))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(consoleCheck)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(speedPane, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(codeScroller, 0, 351, Short.MAX_VALUE))
                .addGap(12, 12, 12)
                .addComponent(statusBar, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }

    // Code for dispatching events from components to event handlers.

    public void actionPerformed(java.awt.event.ActionEvent evt) {
        if (evt.getSource() == stepButton) {
            LC3Gui.this.stepPlease(evt);
        }
        else if (evt.getSource() == startStopToggle) {
            LC3Gui.this.startStopToggleActionPerformed(evt);
        }
        else if (evt.getSource() == consoleCheck) {
            LC3Gui.this.consoleCheckActionPerformed(evt);
        }
        else if (evt.getSource() == menuExit) {
            LC3Gui.this.menuExitSelected(evt);
        }
        else if (evt.getSource() == menuStop) {
            LC3Gui.this.menuStopActionPerformed(evt);
        }
        else if (evt.getSource() == menuExit1) {
            LC3Gui.this.menuExitSelected(evt);
        }
        else if (evt.getSource() == menuStop1) {
            LC3Gui.this.menuStopActionPerformed(evt);
        }
        else if (evt.getSource() == menuExit2) {
            LC3Gui.this.menuExitSelected(evt);
        }
        else if (evt.getSource() == menuStop2) {
            LC3Gui.this.menuStopActionPerformed(evt);
        }
        else if (evt.getSource() == menuExit3) {
            LC3Gui.this.menuExitSelected(evt);
        }
        else if (evt.getSource() == menuStop3) {
            LC3Gui.this.menuStopActionPerformed(evt);
        }
    }

    public void caretPositionChanged(java.awt.event.InputMethodEvent evt) {
    }

    public void inputMethodTextChanged(java.awt.event.InputMethodEvent evt) {
        if (evt.getSource() == codeTable) {
            LC3Gui.this.codeTableInputMethodTextChanged(evt);
        }
    }

    public void keyPressed(java.awt.event.KeyEvent evt) {
    }

    public void keyReleased(java.awt.event.KeyEvent evt) {
    }

    public void keyTyped(java.awt.event.KeyEvent evt) {
        if (evt.getSource() == codeTable) {
            LC3Gui.this.codeTableKeyTyped(evt);
        }
    }

    public void stateChanged(javax.swing.event.ChangeEvent evt) {
        if (evt.getSource() == consoleCheck) {
            LC3Gui.this.consoleCheckStateChanged(evt);
        }
        else if (evt.getSource() == speedSlider) {
            LC3Gui.this.speedSliderStateChanged(evt);
        }
    }

    public void menuCanceled(javax.swing.event.MenuEvent evt) {
    }

    public void menuDeselected(javax.swing.event.MenuEvent evt) {
    }

    public void menuSelected(javax.swing.event.MenuEvent evt) {
        if (evt.getSource() == fileMenu) {
            LC3Gui.this.fileMenuMenuSelected(evt);
        }
        else if (evt.getSource() == fileMenu1) {
            LC3Gui.this.fileMenuMenuSelected(evt);
        }
        else if (evt.getSource() == fileMenu2) {
            LC3Gui.this.fileMenuMenuSelected(evt);
        }
        else if (evt.getSource() == fileMenu3) {
            LC3Gui.this.fileMenuMenuSelected(evt);
        }
    }// </editor-fold>//GEN-END:initComponents
    private void menuStopActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuStopActionPerformed
    // TODO add your handling code here:
    }//GEN-LAST:event_menuStopActionPerformed

    private void fileMenuMenuSelected(javax.swing.event.MenuEvent evt) {//GEN-FIRST:event_fileMenuMenuSelected
    }//GEN-LAST:event_fileMenuMenuSelected

    private void menuExitSelected(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuExitSelected
        // TODO add your handling code here:
        this.dispose();
    }//GEN-LAST:event_menuExitSelected

    private void startStopToggleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startStopToggleActionPerformed
    // TODO add your handling code here:
}//GEN-LAST:event_startStopToggleActionPerformed

    private void codeTableInputMethodTextChanged(java.awt.event.InputMethodEvent evt) {//GEN-FIRST:event_codeTableInputMethodTextChanged
        // TODO add your handling code here:
        codeTable.repaint();
    }//GEN-LAST:event_codeTableInputMethodTextChanged

    private void codeTableKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_codeTableKeyTyped
        // TODO add your handling code here:
        codeTable.repaint();
    }//GEN-LAST:event_codeTableKeyTyped

    private void speedSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_speedSliderStateChanged
        int v = speedSlider.getValue();

        if (v == 101) {
            speedIndicator.setText("Running");
        } else if (v == 0) {
            speedIndicator.setText("Stopped");
        } else {
            speedIndicator.setText(v + " I/sec");
        }
        consoleFrame.printChar('h');
    }//GEN-LAST:event_speedSliderStateChanged

    private void consoleCheckStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_consoleCheckStateChanged
        if (consoleFrame.isVisible() != consoleCheck.isSelected()) {
            consoleFrame.setVisible(consoleCheck.isSelected());
        }
    }//GEN-LAST:event_consoleCheckStateChanged

    private void consoleCheckActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_consoleCheckActionPerformed
    // TODO add your handling code here:
    }//GEN-LAST:event_consoleCheckActionPerformed

    private void stepPlease(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stepPlease
    // TODO add your handling code here:
        
    }//GEN-LAST:event_stepPlease

    public void update(Observable o1, Object o2) {

        
        scrollToTop(codeTable, proc.PC, 0);
        codeTable.setEditingColumn(0);
        codeTable.setEditingRow(proc.PC);
        codeTable.repaint();
        registerTable.repaint();



    }
    @Override
    public void repaint()
    {
        super.repaint();
        consoleFrame.repaint();
    }
    // Assumes table is contained in a JScrollPane. Scrolls the
    // cell (rowIndex, vColIndex) so that it is visible at the center of viewport.
    public void scrollToTop(JTable table, int rowIndex, int vColIndex) {
        if (!(table.getParent() instanceof JViewport)) {
            return;
        }
        JViewport viewport = (JViewport) table.getParent();

        // This rectangle is relative to the table where the
        // northwest corner of cell (0,0) is always (0,0).
        Rectangle rect = table.getCellRect(rowIndex, vColIndex, true);

        // The location of the view relative to the table
        Rectangle viewRect = viewport.getViewRect();

        // Translate the cell location so that it is relative
        // to the view, assuming the northwest corner of the
        // view is (0,0).
        rect.setLocation(rect.x - viewRect.x, rect.y - viewRect.y);

        // Calculate location of rect if it were at the center of view
        int centerX = 0;
        int centerY = viewRect.height - (rect.height * 2);

        // Fake the location of the cell so that scrollRectToVisible
        // will move the cell to the center
        if (rect.x < centerX) {
            centerX = -centerX;
        }
        if (rect.y < centerY) {
            centerY = -centerY;
        }
        rect.translate(centerX, centerY);

        // Scroll the area into view.
        viewport.scrollRectToVisible(rect);
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) {
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new LC3Gui().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    protected javax.swing.JScrollPane RegisterTableHeaders;
    protected javax.swing.JScrollPane codeScroller;
    protected javax.swing.JTable codeTable;
    protected javax.swing.JCheckBox consoleCheck;
    protected javax.swing.JMenu fileMenu;
    protected javax.swing.JMenu fileMenu1;
    protected javax.swing.JMenu fileMenu2;
    protected javax.swing.JMenu fileMenu3;
    protected javax.swing.JMenuBar mainMenu;
    protected javax.swing.JMenuBar mainMenu1;
    protected javax.swing.JMenuBar mainMenu2;
    protected javax.swing.JMenuBar mainMenu3;
    protected javax.swing.JMenuItem menuExit;
    protected javax.swing.JMenuItem menuExit1;
    protected javax.swing.JMenuItem menuExit2;
    protected javax.swing.JMenuItem menuExit3;
    protected javax.swing.JMenuItem menuNew;
    protected javax.swing.JMenuItem menuNew1;
    protected javax.swing.JMenuItem menuNew2;
    protected javax.swing.JMenuItem menuNew3;
    protected javax.swing.JMenuItem menuOpen;
    protected javax.swing.JMenuItem menuOpen1;
    protected javax.swing.JMenuItem menuOpen2;
    protected javax.swing.JMenuItem menuOpen3;
    protected javax.swing.JMenuItem menuRun;
    protected javax.swing.JMenuItem menuRun1;
    protected javax.swing.JMenuItem menuRun2;
    protected javax.swing.JMenuItem menuRun3;
    protected javax.swing.JMenuItem menuSave;
    protected javax.swing.JMenuItem menuSave1;
    protected javax.swing.JMenuItem menuSave2;
    protected javax.swing.JMenuItem menuSave3;
    protected javax.swing.JMenuItem menuSaveAs;
    protected javax.swing.JMenuItem menuSaveAs1;
    protected javax.swing.JMenuItem menuSaveAs2;
    protected javax.swing.JMenuItem menuSaveAs3;
    protected javax.swing.JSeparator menuSeparator;
    protected javax.swing.JSeparator menuSeparator1;
    protected javax.swing.JSeparator menuSeparator2;
    protected javax.swing.JSeparator menuSeparator3;
    protected javax.swing.JMenuItem menuStep;
    protected javax.swing.JMenuItem menuStep1;
    protected javax.swing.JMenuItem menuStep2;
    protected javax.swing.JMenuItem menuStep3;
    protected javax.swing.JMenuItem menuStop;
    protected javax.swing.JMenuItem menuStop1;
    protected javax.swing.JMenuItem menuStop2;
    protected javax.swing.JMenuItem menuStop3;
    protected javax.swing.JTable registerTable;
    protected javax.swing.JMenu runMenu;
    protected javax.swing.JMenu runMenu1;
    protected javax.swing.JMenu runMenu2;
    protected javax.swing.JMenu runMenu3;
    protected javax.swing.JLabel speedIndicator;
    protected javax.swing.JPanel speedPane;
    protected javax.swing.JSlider speedSlider;
    protected javax.swing.JToggleButton startStopToggle;
    protected javax.swing.JPanel statusBar;
    protected javax.swing.JLabel statusLabel;
    protected javax.swing.JLabel statusText;
    protected javax.swing.JButton stepButton;
    // End of variables declaration//GEN-END:variables
    protected Processor proc;
    protected CodeTableModel codeModel;
    protected Thread thread;
    private static int HEX_WIDTH;
    private static int BIN_WIDTH;
    private static int OTHER_WIDTH;
    private Timer timer;
    private ConsoleFrame consoleFrame;
}
